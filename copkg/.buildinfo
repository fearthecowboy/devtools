#product-info {
    product-name: "coapp devtools";
    version: "1.1";
    original-source-location: "git@github.com:coapp/devtools.git";
    original-source-website: "https://github.com/coapp/devtools";
    license: "Apache2.0";
    packager: "garrett serack <garretts@microsoft.com>";
}

private {
    set : release_dir = @"output\any\Release\bin\";
    set : repo_dir = @"..\azure-scripts\private\reposervice\";
    set : pkgs_dir = @"..\azure-scripts\private\pkgs\";
    uses: install;
    build-command: @"
    xcopy /Q /D /Y  ""${release_dir}repositoryservice.exe""  ""${repo_dir}"" || goto failed
     
    for /F %%G in ('dir /s /b /o-n  coapp.devtools*.msi') do ( 
        erase ""${pkgs_dir}\coapp.devtools*.msi"" > nul 2>&1
        xcopy /Q /D /Y  %%G  ""${pkgs_dir}"" || goto failed
        az copy %%G files: || goto failed
        echo http://coapp.blob.core.windows.net/files/%%~nxG
        goto :eof
    )
    ";    
}

release { 
    default : true;
    // builds the binaries in "Release" mode but does not sign them.
    set : cfg = "Release";
    
    uses : {
        anycpu 
    };
    
    build-command: @"
    cscript //e:jscript scripts\increment-build-version.js
    echo build done.";
}

package { 
    default: false;
    set : cfg = "Release";
    uses : sign;
    build-command: @"
        cscript //e:jscript scripts\increment-build-version.js
        REM Add the newly built folder to the path, 
        REM And coapp tools folder to the end of the path, in case we don't have the tools available.
        PATH=%CD%\output\any\Release\bin\;%PATH%;%CD%\ext\tools
        
        cd copkg
        autopackage coapp.devtools.autopkg  || goto failed
        erase /Q *.wixpdb
        echo Done Packaging!
    ";
}

upload {
    default: false;
    uses : install;
    build-command: @"
    for /F %%G in ('dir /s /b /o-n  coapp.devtools*.msi') do ( 
        curl -T %%G http://coapp.org/upload/
        goto :eof
    )
    ";
}

install {
    default: false;
    set : cfg = "Release";
    uses : package;
    build-command: @"
    for /F %%G in ('dir /s /b /o-n  coapp.devtools*.msi') do ( 
        coapp install %%G
        goto :eof
    )
    ";
}

debug {
    // builds binaries in debug mode
    default: false;
    set : cfg = "Debug";
    uses : {
        anycpu 
    };
    
    build-command: @"echo build done.";
}


sign { 
    // builds all the binaries in "Release" mode and digitally signs and 
    // strong-names the binaries.
    
    set : cfg = "Release";
    set : release_dir = @"output\any\Release\bin\";
    
    default: false;
    
    uses: {
        anycpu
    };
        
    targets: {
    };
    
    build-command: @"
        REM Add the coapp tools folder to the end of the path, in case we don't have the tools in the path
        PATH=%PATH%;%CD%\ext\tools
     
        REM sign files in release directory
        simplesigner --nologo  --sign --strong-name ""${release_dir}autopackage.exe"" ""${release_dir}debugwatch.exe"" ""${release_dir}Azure.exe"" ""${release_dir}RepositoryService.exe"" ""${release_dir}mkRepo.exe"" ""${release_dir}pTk.exe"" ""${release_dir}QuickTool.exe"" ""${release_dir}Scan.exe"" ""${release_dir}simplesigner.exe"" ""${release_dir}ToolScanner.exe"" ""${release_dir}CoApp.CCI.dll"" ""${release_dir}CoApp.Developer.Toolkit.dll""
    ";
}


export {
    set : release_dir = @"output\any\Release\bin\";
    set : tools_dir = @"..\tools\";
    
    default: false;
    uses: {
        sign
    };
    
    build-command: @"
        REM copy tools into ..\tools folder (this should be the one that is committed back when exported)
        xcopy /Q /D /Y  ""${release_dir}autopackage.exe""  ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}Azure.exe""  ""${tools_dir}"" || goto failed
        REM xcopy /Q /D /Y  ""${release_dir}CoApp.RepositoryService.exe""  ""${tools_dir}"" || goto failed
        REM xcopy /Q /D /Y  ""${release_dir}mkRepo.exe"" ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}pTk.exe"" ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}QuickTool.exe"" ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}Scan.exe"" ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}simplesigner.exe"" ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}ToolScanner.exe"" ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}CoApp.CCI.dll"" ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}CoApp.Developer.Toolkit.dll""  ""${tools_dir}"" || goto failed

        REM bring along the tool dependencies
        xcopy /Q /D /Y  ""${release_dir}CoApp.Toolkit.dll"" ""${tools_dir}"" || goto failed
        xcopy /Q /D /Y  ""${release_dir}CoApp.Toolkit.Engine.Client.dll""  ""${tools_dir}"" || goto failed
        
        cscript //e:jscript scripts\increment-build-version.js
    ";
}


anycpu {
    default: no;
    platform : x86;
    compiler: vc10;
    
    uses: clean;
    
    targets: { 
        @"output\any\${cfg}\bin\managed-bootstrap.exe",
        @"output\any\${cfg}\bin\native-bootstrap.exe",
        @"output\any\${cfg}\bin\autopackage.exe",
        @"output\any\${cfg}\bin\debugwatch.exe",
        @"output\any\${cfg}\bin\Azure.exe",
//        @"output\any\${cfg}\bin\RepositoryService.exe",
//        @"output\any\${cfg}\bin\mkRepo.exe",
        @"output\any\${cfg}\bin\pTk.exe",
        @"output\any\${cfg}\bin\QuickTool.exe",
        @"output\any\${cfg}\bin\Scan.exe",
        @"output\any\${cfg}\bin\simplesigner.exe",
        @"output\any\${cfg}\bin\ToolScanner.exe",
        @"output\any\${cfg}\bin\CoApp.CCI.dll",
        @"output\any\${cfg}\bin\CoApp.Developer.Toolkit.dll",
    };

    build-command: @"
        
        REM build the native-bootstrapper first
        msbuild  /p:Configuration=${cfg} ""/p:Platform=win32"" /p:SolutionDir=..\ native-bootstrap\bootstrap.vcxproj  || goto failed
        xcopy /d /y output\any\${cfg}\bin\native-bootstrap.exe binaries\
        
        REM then build the managed-bootstrapper 
        msbuild  /p:Configuration=${cfg} /p:Platform=ANYCPU /p:SolutionDir=.\ managed-bootstrap.csproj  || goto failed
        xcopy /d /y output\any\${cfg}\bin\managed-bootstrap.exe binaries\
        
        REM then everything else
        msbuild  /p:Configuration=${cfg} ""/p:Platform=Any CPU"" devtools.sln || goto failed
    ";
}

clean {
    default: no;

    clean-command: @"
        rmdir /s /q output intermediate bin obj > nul 2>&1
        for /d %%v in (*) do if exist %%v\obj rmdir /s /q %%v\obj        
        for /d %%v in (*) do if exist %%v\bin rmdir /s /q %%v\bin
    ";
}